package lett.malcolm.consciouscalculator.emulator;

import java.util.List;
import java.util.Queue;

import lett.malcolm.consciouscalculator.emulator.interfaces.Event;

public class AttentionAttenuator {
	private Queue<? extends Object> commandStream;
	private Queue<? extends Object> consciousFeedbackStream;
	private WorkingMemory workingMemory;
	
	public AttentionAttenuator(
			Queue<? extends Object> commandStream,
			Queue<? extends Object> consciousFeedbackStream,
			WorkingMemory workingMemory) {
		this.commandStream = commandStream;
		this.consciousFeedbackStream = consciousFeedbackStream;
		this.workingMemory = workingMemory;
	}

	/**
	 * Decides what to do given:
	 * - raw sense inputs
	 * - events from interceptors
	 * - events from processors
	 * - current state of working memory
	 * 
	 * Outcomes:
	 * - updates state of working memory
	 * @param interceptedEvents
	 * 
	 * Prioritization:
	 * - Events are prioritized by their standalone strength
	 * - Events from processors are preferred over events from interceptors
	 * - TODO help decide events based on state of working memory (whatever that means)
	 * - TODO attenuate events based on the strength of the working-memory item or other source that they were based on
	 * 
	 * Attenuation:
	 * - TODO
	 * @param interceptedEvents - events generated by interceptors
	 * @param processedEvents - events generated by processors
	 * @param true if changed the state of anything (used for low-level control loop triggering)
	 */
	public boolean act(List<Event> interceptedEvents, List<Event> processedEvents) {
		Event chosenEvent = null;
		for (Event event: processedEvents) {
			if (chosenEvent == null || event.strength() > chosenEvent.strength()) {
				chosenEvent = event;
			}
		}

		// secondary: intercepted events, only pick if strength trumps what was found above 
		for (Event event: interceptedEvents) {
			if (chosenEvent == null || event.strength() > chosenEvent.strength()) {
				chosenEvent = event;
			}
		}

		// act
		if (chosenEvent != null) {
			// adds or updates
			workingMemory.store(chosenEvent);
			return true;
		}
		return false;
	}
	
}
