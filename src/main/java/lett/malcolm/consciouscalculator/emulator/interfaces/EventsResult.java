/**
 * Conscious Calculator - Emulation of a conscious calculator.
 * Copyright Â© 2019 Malcolm Lett (malcolm.lett at gmail.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package lett.malcolm.consciouscalculator.emulator.interfaces;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import lett.malcolm.consciouscalculator.utils.Events;

/**
 * Wrapper around the result from an emitting processor or interceptor.
 * 
 * Note: emitters are identified by instance reference, rather than just type.
 * This is important as, in the future, there may be only a small number of emitter types,
 * with many different instances constructed through learning.
 * @author Malcolm Lett
 */
// TODO also want to know which event(s) was the trigger for the emitter.
// Just do this via references?
public class EventsResult {
	// emitter which produced the emittedEvents
	private final EventEmitter emitter;
	
	// events generated by emitter
	private final List<Event> emittedEvents;

	public EventsResult(EventEmitter emitter, Event emittedEvent) {
		this.emitter = emitter;
		this.emittedEvents = (emittedEvent == null) ? Collections.emptyList() :  Collections.singletonList(emittedEvent);
	}
	
	public EventsResult(EventEmitter emitter, List<Event> emittedEvents) {
		this.emitter = emitter;
		this.emittedEvents = emittedEvents;
	}
	
	@Override
	public String toString() {
		if (emittedEvents.isEmpty()) {
			return String.format("%s:{0}", emitter.getClass().getSimpleName());
		}
		else {
			return String.format("%s:{%d @ %f => %s}", emitter.getClass().getSimpleName(),
				emittedEvents.size(),
				emittedEvents.stream().reduce(Events.strongest()).map(e -> e.strength()).orElse(null),
				emittedEvents.stream().map(e -> e.getClass().getSimpleName()).collect(Collectors.toList()));
		}
	}

	public EventEmitter emitter() {
		return emitter;
	}

	public List<Event> emittedEvents() {
		return emittedEvents;
	}
}
